/*
 * ProxyStandard.h
   *
 * Created on: 2011-7-12
 * Author: Service Platform Architecture Team (spat@58.com)
 */

#ifndef PROXYSTANDARD_H_
#define PROXYSTANDARD_H_
typedef void (*call_back_fun_)(int errorCode, void *retVal, void *context);
#include "Parameter.h"
#include "../threadpool/threadpool.h"
#include <string>
namespace gaea {

class ProxyStandard {
public:
	ProxyStandard(std::string serviceName, char *lookup);
	void *invoke(char *methodName, Parameter **para, int paraLen);
	int asyncInvoke(char *methodName, Parameter **para, int paraLen, call_back_fun_ callBackFun, void *context);
	virtual ~ProxyStandard();
private:
	std::string serviceName;
	char *lookup;
	static ThreadPool *tp;
	static pthread_mutex_t mutex;
	static void asyncInvoke(void *data);
};
class ProxStandardSession {
public:
	ProxStandardSession(char *methodName, Parameter **para, int paraLen, call_back_fun_ callBackFun, void *context,
			ProxyStandard *ps) {
		this->methodName = methodName;
		this->para = para;
		this->paraLen = paraLen;
		this->ps = ps;
		this->callBackFun = callBackFun;
		this->context = context;
	}
	call_back_fun_ getCallBackFun() const;
	void *getContext() const;
	char *getMethodName() const;
	Parameter **getPara() const;
	int getParaLen() const;
	ProxyStandard *getPs() const;

private:
	call_back_fun_ callBackFun;
	void *context;
	char *methodName;
	Parameter **para;
	int paraLen;
	ProxyStandard *ps;
};
} /* namespace gaea */
#endif /* PROXYSTANDARD_H_ */
